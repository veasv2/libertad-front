// src/services/seguridad/usuario/usuario-filters.ts

import { FilterBuilder, SortBuilder, createGlobalSearch } from 'src/lib/filter-builders';
import type { UsuarioWhere } from './types';

// ================================================================
// BUILDER ESPECÍFICO PARA FILTROS DE USUARIO
// ================================================================

export class UsuarioFilterBuilder extends FilterBuilder<UsuarioWhere> {
    // Métodos específicos para usuario
    searchByName(searchTerm: string): this {
        const globalSearch = createGlobalSearch<UsuarioWhere>(searchTerm, [
            'nombres',
            'apellido_paterno',
            'email',
            'dni'
        ]);

        // ← CORREGIDO: Usar el método público addComplexFilter
        return this.addComplexFilter(globalSearch);
    }

    onlyActive(): this {
        return this.enumEquals('estado', 'ACTIVO');
    }

    onlyInactive(): this {
        return this.enumEquals('estado', 'INACTIVO');
    }

    byType(tipo: string): this {
        return this.enumEquals('tipo', tipo);
    }

    byTypes(tipos: string[]): this {
        return this.enumIn('tipo', tipos);
    }

    createdInLast30Days(): this {
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        return this.dateRange('fecha_creacion', thirtyDaysAgo, new Date());
    }

    createdInLastDays(days: number): this {
        const daysAgo = new Date();
        daysAgo.setDate(daysAgo.getDate() - days);
        return this.dateRange('fecha_creacion', daysAgo, new Date());
    }

    accessedInLastDays(days: number): this {
        const daysAgo = new Date();
        daysAgo.setDate(daysAgo.getDate() - days);
        return this.dateRange('ultimo_acceso', daysAgo, new Date());
    }

    byEmail(email: string): this {
        return this.stringEquals('email', email);
    }

    byDni(dni: string): this {
        return this.stringEquals('dni', dni);
    }

    withFailedAttempts(): this {
        return this.numberGreaterThan('intentos_fallidos', 0);
    }

    // Método para combinar búsqueda con filtros adicionales
    searchActiveUsers(searchTerm: string): this {
        return this.searchByName(searchTerm).onlyActive();
    }
}

// ================================================================
// INSTANCIAS LISTAS PARA USAR
// ================================================================

// Crear nuevas instancias para evitar conflictos
export const createUsuarioFilters = () => new UsuarioFilterBuilder();
export const createUsuarioSort = () => new SortBuilder();

// ================================================================
// PRESETS COMUNES
// ================================================================

export const UsuarioPresets = {
    // Usuarios activos ordenados por nombre
    activeByName: () => ({
        where: createUsuarioFilters().onlyActive().build(),
        sort: createUsuarioSort().asc('nombres').build()
    }),

    // Búsqueda con ordenamiento por relevancia
    search: (term: string) => ({
        where: createUsuarioFilters().searchByName(term).build(),
        sort: createUsuarioSort().desc('fecha_actualizacion').build()
    }),

    // Búsqueda solo en usuarios activos
    searchActive: (term: string) => ({
        where: createUsuarioFilters().searchActiveUsers(term).build(),
        sort: createUsuarioSort().asc('nombres').build()
    }),

    // Usuarios recientes (últimos 30 días)
    recent: () => ({
        where: createUsuarioFilters().createdInLast30Days().build(),
        sort: createUsuarioSort().desc('fecha_creacion').build()
    }),

    // Usuarios por tipo específico
    byType: (tipo: string) => ({
        where: createUsuarioFilters().byType(tipo).onlyActive().build(),
        sort: createUsuarioSort().asc('nombres').build()
    }),

    // Usuarios con intentos fallidos
    withFailedAttempts: () => ({
        where: createUsuarioFilters().withFailedAttempts().build(),
        sort: createUsuarioSort().desc('intentos_fallidos').asc('nombres').build()
    }),

    // Usuarios accedidos recientemente
    recentlyAccessed: (days: number = 7) => ({
        where: createUsuarioFilters().accessedInLastDays(days).onlyActive().build(),
        sort: createUsuarioSort().desc('ultimo_acceso').build()
    })
};

// ================================================================
// FUNCIONES HELPER ADICIONALES
// ================================================================

/**
 * Crea un filtro de búsqueda rápida combinando múltiples criterios
 */
export function createQuickSearch(
    searchTerm: string,
    includeInactive: boolean = false,
    userType?: string
): UsuarioWhere {
    const builder = createUsuarioFilters();

    if (searchTerm) {
        builder.searchByName(searchTerm);
    }

    if (!includeInactive) {
        builder.onlyActive();
    }

    if (userType) {
        builder.byType(userType);
    }

    return builder.build();
}

/**
 * Crea ordenamiento común para listas de usuarios
 */
export function createCommonSort(sortBy: 'name' | 'date' | 'email' | 'recent' = 'name') {
    const builder = createUsuarioSort();

    switch (sortBy) {
        case 'name':
            return builder.asc('nombres').asc('apellido_paterno').build();
        case 'date':
            return builder.desc('fecha_creacion').asc('nombres').build();
        case 'email':
            return builder.asc('email').build();
        case 'recent':
            return builder.desc('ultimo_acceso').desc('fecha_actualizacion').build();
        default:
            return builder.asc('nombres').build();
    }
}