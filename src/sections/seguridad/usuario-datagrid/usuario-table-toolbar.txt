import type { UseSetStateReturn } from 'minimal-shared/hooks';
import type { SelectChangeEvent } from '@mui/material/Select';
import type { IProductTableFilters } from 'src/types/product';
import type { CustomToolbarSettingsButtonProps } from 'src/components/custom-data-grid';

import { useState, useCallback } from 'react';
import { varAlpha } from 'minimal-shared/utils';

import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import Select from '@mui/material/Select';
import { Toolbar } from '@mui/x-data-grid';
import MenuList from '@mui/material/MenuList';
import MenuItem from '@mui/material/MenuItem';
import Divider from '@mui/material/Divider';
import Checkbox from '@mui/material/Checkbox';
import InputLabel from '@mui/material/InputLabel';
import IconButton from '@mui/material/IconButton';
import FormControl from '@mui/material/FormControl';
import { CustomPopover } from 'src/components/custom-popover';
import { usePopover } from 'minimal-shared/hooks';
import { TIPO_USUARIO_OPTIONS } from 'src/types/enums/usuario-enum';
import { RouterLink } from 'src/routes/components';
import { paths } from 'src/routes/paths';

import { Iconify } from 'src/components/iconify';
import {
  ToolbarContainer,
  ToolbarLeftPanel,
  ToolbarRightPanel,
  CustomToolbarQuickFilter,
  CustomToolbarColumnsButton,
  CustomToolbarSettingsButton,
} from 'src/components/custom-data-grid';

import { UsuarioTableFiltersResult } from './usuario-table-filters-result';

type FilterOption = {
  value: string;
  label: string;
};

type Props = CustomToolbarSettingsButtonProps & {
  canReset: boolean;
  filteredResults: number;
  selectedRowCount: number;
  filters: UseSetStateReturn<IProductTableFilters>;
  options: {
    stocks: FilterOption[];
    publishs: FilterOption[];
  };
  onOpenConfirmDeleteRows: () => void;
};

export function ProductTableToolbar({ options, filters, canReset, filteredResults, selectedRowCount, onOpenConfirmDeleteRows, settings, onChangeSettings, }: Props) {
  const menuActions = usePopover();
  const { state: currentFilters, setState: updateFilters } = filters;

  const [stock, setStock] = useState<string[]>(currentFilters.stock || []);
  const [publish, setPublish] = useState<string[]>(currentFilters.publish || []);

  const handleSelect = useCallback(
    (setter: (value: string[]) => void) => (event: SelectChangeEvent<string[]>) => {
      const value = event.target.value;
      const parsedValue = typeof value === 'string' ? value.split(',') : value;

      setter(parsedValue);
    },
    []
  );

  const renderMenuActions = () => (
    <CustomPopover
      open={menuActions.open}
      anchorEl={menuActions.anchorEl}
      onClose={menuActions.onClose}
      slotProps={{ arrow: { placement: 'right-top' } }}
    >
      <MenuList>
        <MenuItem onClick={() => menuActions.onClose()}>
          <Iconify icon="solar:printer-minimalistic-bold" />
          Imprimir
        </MenuItem>
        <MenuItem onClick={() => menuActions.onClose()}>
          <Iconify icon="solar:export-bold" />
          Descargar
        </MenuItem>
        <Divider />
        <CustomToolbarColumnsButton componentType="menu" />
        <CustomToolbarSettingsButton componentType="menu" settings={settings} onChangeSettings={onChangeSettings} />
      </MenuList>
    </CustomPopover>
  );

  return (
    <>
      <Toolbar>
        <ToolbarContainer>
          <ToolbarLeftPanel>
            <FilterSelect
              label="Tipo Usuario"
              value={stock}
              options={TIPO_USUARIO_OPTIONS}
              onChange={handleSelect(setStock)}
              onApply={() => updateFilters({ stock })}
            />
            <CustomToolbarQuickFilter />
          </ToolbarLeftPanel>
          <ToolbarRightPanel>
            <Box
              sx={{
                gap: 1,
                display: 'flex',
                flexDirection: 'row',
                alignItems: 'center',
                flexShrink: 0,
              }}
            >
              <Button
                component={RouterLink}
                href={paths.seguridad.user.new}
                variant="contained"
                startIcon={<Iconify icon="mingcute:add-line" />}
                sx={{ px: 2.5, py: 1 }}
              >
                Agregar
              </Button>
            </Box>
            <IconButton onClick={menuActions.onOpen}>
              <Iconify icon="eva:more-vertical-fill" />
            </IconButton>
            {renderMenuActions()}
          </ToolbarRightPanel>
        </ToolbarContainer>
      </Toolbar>

      {canReset && (
        <ProductTableFiltersResult
          filters={filters}
          totalResults={filteredResults}
          sx={{ p: 2.5, pt: 0 }}
        />
      )}
    </>
  );
}

// ----------------------------------------------------------------------

type FilterSelectProps = {
  label: string;
  value: string[];
  options: FilterOption[];
  onChange: (event: SelectChangeEvent<string[]>) => void;
  onApply: () => void;
};

function FilterSelect({ label, value, options, onChange, onApply }: FilterSelectProps) {
  const id = `filter-${label.toLowerCase()}-select`;

  return (
    <FormControl sx={{ flexShrink: 0, width: { xs: 1, md: 200 } }}>
      <InputLabel htmlFor={id}>{label}</InputLabel>
      <Select
        multiple
        label={label}
        value={value}
        onChange={onChange}
        onClose={onApply}
        renderValue={(selected) => {
          const output = options
            .filter((opt) => selected.includes(opt.value))
            .map((opt) => opt.label);

          return output.join(', ');
        }}
        inputProps={{ id }}
      >
        {options.map((option) => (
          <MenuItem key={option.value} value={option.value}>
            <Checkbox
              disableRipple
              size="small"
              checked={value.includes(option.value)}
              slotProps={{ input: { id: `${option.value}-checkbox` } }}
            />
            {option.label}
          </MenuItem>
        ))}

        <MenuItem
          onClick={onApply}
          sx={(theme) => ({
            justifyContent: 'center',
            fontWeight: theme.typography.button,
            bgcolor: varAlpha(theme.vars.palette.grey['500Channel'], 0.08),
            border: `solid 1px ${varAlpha(theme.vars.palette.grey['500Channel'], 0.16)}`,
          })}
        >
          Aplicar
        </MenuItem>
      </Select>
    </FormControl>
  );
}
